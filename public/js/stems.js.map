{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@artcommacode/q/index.js","src/js/components/Button.js","src/js/components/Stem.js","src/js/components/Track.js","src/js/components/publisher.js","src/js/stems.js"],"names":[],"mappings":"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","file":"stems.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar toArray = function toArray(list) {\n  return [].concat(_toConsumableArray(list));\n};\n\nvar first = function first(xs) {\n  return xs[0];\n};\n\nvar elemError = function elemError(e) {\n  throw new Error(\"\\\"\" + String(e) + \"\\\" does't exist in the document\");\n};\n\nvar getRoot = function getRoot(e) {\n  return !e ? document : document && document.body && document.body.contains(e) ? e : elemError(e);\n};\n\nvar query = exports.query = function query(q, e) {\n  var root = getRoot(e);\n  return root ? toArray(root.querySelectorAll(q)) : [];\n};\n\nvar queryOne = exports.queryOne = function queryOne(q, e) {\n  return first(query(q, e));\n};\n","\n/**\n * Receives a DOM element.\n * Returns an object with enable, activate, and deactivate methods\n * @param  {DOM element} element\n * @return {Shape}\n */\n\nfunction makeButton(el, buttonIndex, publisher) {\n\tconst button = {};\n\tbutton.element = el;\n\n\tbutton.enable = function enable() {\n\t\tbutton.enabled = true;\n\t\tbutton.element.classList.add('enabled');\n\t};\n\n\tbutton.disable = function disable() {\n\t\tbutton.enabled = false;\n\t\tbutton.element.classList.remove('enabled');\n\t};\n\n\tbutton.toggleEnabled = function toggleEnabled() {\n\t\tif (button.enabled) {\n\t\t\tbutton.disable();\n\t\t} else {\n\t\t\tbutton.enable();\n\t\t}\n\t};\n\n\tbutton.activate = function activate() {\n\t\tif (!button.enabled) button.enable();\n\t\tbutton.active = true;\n\t\tbutton.element.classList.add('active');\n\t};\n\n\tbutton.deactivate = function deactivate() {\n\t\tbutton.active = false;\n\t\tbutton.element.classList.remove('active');\n\t};\n\n\tbutton.toggleActive = function toggleActive(inputState) {\n\t\tbutton.active = inputState || !button.active;\n\t\tif (button.active === true) {\n\t\t\tbutton.activate();\n\t\t} else {\n\t\t\tbutton.deactivate();\n\t\t}\n\t};\n\n\tbutton.element.addEventListener('click', () => {\n\t\tbutton.toggleActive();\n\t\tconst event = (button.active) ? 'stemActivated' : 'stemDeactivated';\n\t\tpublisher.emit(event, buttonIndex);\n\t});\n\n\tpublisher.subscribe('allButtonsDisabled', button.disable);\n\n\tpublisher.subscribe('stemPlayed', (activeIndex) => {\n\t\tconsole.log(activeIndex, buttonIndex);\n\t\tif (activeIndex === buttonIndex) button.activate();\n\t});\n\n\treturn button;\n}\n\nexport default makeButton;\n","import { query, queryOne } from '@artcommacode/q';\n\n/**\n * Receives a DOM element with links to audio files to be played in tandem as stems.\n * Returns an object with play/pause/mute methods\n * @param  {DOM element} element\n * @return {Stem}\n */\nfunction makeStem(element) {\n\tconst stem = {};\n\tstem.audio = element;\n\tstem.active = false;\n\tconst url = stem.audio.getAttribute('src').split('/');\n\tstem.fileName = url.slice(-1)[0];\n\n\tstem.play = function playStem() {\n\t\tstem.active = true;\n\t\tstem.audio.play();\n\t};\n\n\tstem.stop = function stopStem() {\n\t\tstem.active = false;\n\t\tstem.audio.pause();\n\t\tstem.audio.currentTime = 0;\n\t};\n\n\tstem.unmute = function unmuteStem() {\n\t\tstem.active = true;\n\t\tstem.audio.volume = 1;\n\t};\n\n\tstem.mute = function muteStem() {\n\t\tconsole.log('stem muted')\n\t\tstem.active = false;\n\t\tstem.audio.volume = 0;\n\t};\n\n\treturn stem;\n}\n\n\nexport default makeStem;\n","import { query, queryOne } from '@artcommacode/q';\nimport makeStem from './Stem';\n\n/**\n * Receives a DOM element with links to audio files to be played in tandem as stems.\n * Returns an object with play/pause/mute methods\n * @param  {DOM element} element\n * @return {Stem}\n */\nfunction makeTrack(el, trackIndex, publisher, readyCallback) {\n\tconst track = {};\n\ttrack.element = el;\n\tconst stemElements = query('audio', el);\n\n\tconst stems = [];\n\n\t// See if all of the tracks are ready\n\n\tfunction checkIfReady() {\n\t\tconst readyCount = stems.filter(stem => stem.isReady).length;\n\n\t\tif (readyCount === stems.length) {\n\t\t\ttrack.ready = true;\n\t\t\t// reports back to the main script, so it can count all of the loaded tracks\n\t\t\treadyCallback(trackIndex);\n\t\t\tif (!track.hasErrors) {\n\t\t\t\ttrack.element.classList.add('ready');\n\t\t\t} else {\n\t\t\t\ttrack.element.classList.add('has-errors');\n\t\t\t}\n\t\t}\n\t}\n\n\t// add each element to the tracks array.\n\t// When it's loaded, report it.\n\t// If there is a network error, flag the track\n\tstemElements.map((stemElement) => {\n\t\tconst stem = makeStem(stemElement);\n\t\tconst url = stemElement.getAttribute('src').split('/');\n\t\tstem.fileName = url.slice(-1)[0];\n\t\tstems.push(stem);\n\n\t\tstem.audio.load();\n\n\t\tfunction canPlayThroughHandler() {\n\t\t\t// console.log(`${trackIndex} - ${stem.fileName} is ready`)\n\t\t\tstem.isReady = true;\n\t\t\tstem.audio.removeEventListener('canplaythrough', canPlayThroughHandler);\n\t\t\tcheckIfReady();\n\t\t}\n\n\t\tstem.audio.addEventListener('canplaythrough', canPlayThroughHandler);\n\n\t\tstem.audio.addEventListener('error', (e) => {\n\t\t\tif (e.target.error.code === 3 || e.target.error.code === 4) {\n\t\t\t\tconsole.warn(`${stem.fileName} could not be loaded`);\n\t\t\t\tstem.isReady = true;\n\t\t\t\ttrack.hasErrors = true;\n\t\t\t\tcheckIfReady();\n\t\t\t}\n\t\t});\n\t});\n\n\t// functions that we attach to the 'track' object are public &\n\t// usable from the outside.\n\t// Everything else is private.\n\n\n\tfunction playAllStems() {\n\t\tstems.map((stem, index) => {\n\t\t\tstem.unmute();\n\t\t\tpublisher.emit('stemPlayed', index);\n\t\t});\n\t}\n\n\n\tconst startSynced = () => new Promise((resolve, reject) => {\n\t\tstems.map(stem => stem.mute());\n\t\tfunction checkSync() {\n\t\t\tstems.map(stem => stem.play());\n\t\t\tconst minMax = stems.reduce((previous, current) => {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(previous.min || current.audio.currentTime, current.audio.currentTime),\n\t\t\t\t\tmax: Math.max(previous.max || current.audio.currentTime, current.audio.currentTime),\n\t\t\t\t};\n\t\t\t}, { min: undefined, max: undefined });\n\t\t\tconst diff = minMax.max - minMax.min;\n\t\t\tif (minMax.max === 0) {\n\t\t\t\tconsole.log('Not ready.. trying again');\n\t\t\t\tsetTimeout(checkSync, 500);\n\t\t\t} else if (diff < 0.05) {\n\t\t\t\tconsole.log(`starting with diff of ${diff}`);\n\t\t\t\tstems.map(stem => stem.stop());\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tplayAllStems();\n\t\t\t\t\tresolve();\n\t\t\t\t}, 250);\n\t\t\t} else {\n\t\t\t\tconsole.log(`diff: ${diff}  - trying again..`);\n\t\t\t\tstems.map(stem => stem.stop());\n\t\t\t\tsetTimeout(checkSync, 500);\n\t\t\t}\n\t\t}\n\t\tsetTimeout(checkSync, 500);\n\t});\n\n\tfunction play() {\n\t\ttrack.active = true;\n\t\ttrack.element.classList.add('loading');\n\t\t// don't do anything if it's not ready. The user shouldn't be\n\t\t// able to play the track until it's ready anyway, though.\n\t\tif (!track.ready) return false;\n\t\t// const isSynced = startSynced();\n\t\tstartSynced().then(() => {\n\t\t\ttrack.element.classList.add('playing');\n\t\t});\n\t\treturn true;\n\t}\n\n\tfunction stop() {\n\t\tstems.map(stem => stem.stop());\n\t\ttrack.active = false;\n\t\ttrack.element.classList.remove('playing');\n\t}\n\n\t/**\n\t * Bind event listeners & emitters\n\t */\n\n\ttrack.element.addEventListener('click', () => {\n\t\tpublisher.emit('trackPlayed', trackIndex);\n\t});\n\n\tpublisher.subscribe('trackPlayed', (newIndex) => {\n\t\tdebugOutput.innerHTML = '';\n\t\tif (newIndex === trackIndex) {\n\t\t\tplay();\n\t\t} else {\n\t\t\tstop();\n\t\t}\n\t});\n\n\tpublisher.subscribe('stemActivated', (stemIndex) => {\n\t\tif (track.active) stems[stemIndex].unmute();\n\t});\n\tpublisher.subscribe('stemDeactivated', (stemIndex) => {\n\t\tconsole.log(stemIndex, track.active);\n\t\tif (track.active) stems[stemIndex].mute();\n\t});\n\n\tpublisher.subscribe('allStemsActivated', playAllStems);\n\n\t/**\n\t * Debug logging\n\t */\n\n\tconst debugOutput = queryOne('#debug-output');\n\n\tfunction pad(input, padLength = 2, char = '0', direction = 'right') {\n\t\tlet string = input.toString();\n\t\tconst diff = padLength - input.length;\n\t\tfor (let i = 0; i < diff; i += 1) {\n\t\t\tif (direction === 'right') {\n\t\t\t\tstring += char;\n\t\t\t} else {\n\t\t\t\tstring = char + string;\n\t\t\t}\n\t\t}\n\t\treturn string;\n\t}\n\n\tfunction formatDecimal(input, lLength, rLength) {\n\t\tconst arr = input.toString().split('.');\n\t\tif (arr.length === 1) arr.push('0');\n\t\tconst whole = pad(arr[0], lLength, '0', 'left');\n\t\tconst dec = pad(arr[1], rLength, '0', 'right').substr(0, rLength);\n\t\treturn `${whole}.${dec}`;\n\t}\n\n\tsetInterval(() => {\n\t\tif (track.active) {\n\t\t\tconst debugString = ['*******'];\n\t\t\tlet min;\n\t\t\tlet max;\n\t\t\tstems.map((stem, index) => {\n\t\t\t\tif (stem.audio) {\n\t\t\t\t\tconst activated = (stem.active) ? 'activated' : 'deactivated';\n\t\t\t\t\tconst currentTime = Math.round(stem.audio.currentTime * 10000) / 10000;\n\t\t\t\t\tconst formattedTime = formatDecimal(currentTime, 3, 4);\n\n\t\t\t\t\tmin = (min) ? Math.min(min, currentTime) : currentTime;\n\t\t\t\t\tmax = (max) ? Math.max(max, currentTime) : currentTime;\n\t\t\t\t\tif (currentTime === 0) stem.audio.play();\n\t\t\t\t\tdebugString.push(`   stem ${index}: ${formattedTime} | ${stem.fileName} - ${activated} | ${stem.audio.buffered.end(0)} / ${stem.audio.duration}`);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst diff = formatDecimal(max - min, 1, 6);\n\t\t\tdebugString.push(`   max diff: ${diff}`);\n\t\t\tdebugOutput.innerHTML = debugString.join('<br>');\n\t\t}\n\t}, 100);\n\n\ttrack.stemsCount = stems.length;\n\treturn track;\n}\n\n\nexport default makeTrack;\n","\nclass PubSubEmitter {\n\tconstructor() {\n\t\t// create a new Map to hold all of the topics\n\t\tthis.listeners = new Map();\n\t}\n\n\tsubscribe(topic, callback) {\n\t\t// if the listener does not hae the topic yet, add it.\n\t\tif (!this.listeners.has(topic)) this.listeners.set(topic, []);\n\t\t// push the callback to the topic's array\n\t\tthis.listeners.get(topic).push(callback);\n\t}\n\n\tunsubscribe(topic, callback) {\n\t\tconst listeners = this.listeners.get(topic);\n\t\tlet index;\n\n\t\tif (listeners && listeners.length) {\n\t\t\t// find the index of the callback we're removing\n\t\t\tindex = listeners.reduce((i, listener, currentIndex) => {\n\t\t\t\t(typeof(listener) === 'function' && listener === callback) ?\n\t\t\t\t\ti = currentIndex :\n\t\t\t\t\ti;\n\t\t\t}, -1);\n\n\t\t\tif (index > -1) {\n\t\t\t\t// if we found a match, splice it out, and resupply the map with the spliced array\n\t\t\t\tlisteners.splice(index, 1);\n\t\t\t\tthis.listeners.set(topic, listeners);\n\t\t\t\treturn true; // return true if we removed something\n\t\t\t}\n\t\t}\n\t\treturn false; // return false if we didn't\n\t}\n\n\temit(topic, ...args) {\n\t\t// get the listeners subscribed to the topic\n\t\tconst listeners = this.listeners.get(topic);\n\n\t\tif (listeners && listeners.length) {\n\t\t\t// execute each callback with any supplied arguments\n\t\t\tlisteners.forEach((listener) => {\n\t\t\t\tlistener(...args);\n\t\t\t});\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst publisher = new PubSubEmitter();\n\nexport default publisher;\n","// A small utility for getting DOM elements\nimport { query, queryOne } from '@artcommacode/q';\n\n// A component you can use to emit and subscribe to events.\n// Helpful to decouple UI stuff\nimport publisher from './components/publisher';\nimport makeTrack from './components/Track';\nimport makeButton from './components/Button';\n\n// first, just find the elements\nconst trackElements = query('.stem-track');\nconst everything = queryOne('.stem-buttons .play-all') || false;\nconst buttons = [];\nconst tracks = [];\n\nlet readyCount = 0;\n\nfunction readyHandler() {\n\treadyCount += 1;\n\tif (readyCount === tracks.length) {\n\t\tqueryOne('.stems-container').classList.add('ready');\n\t}\n}\n\n// add each composed track to an array\ntrackElements.map((track, index) => {\n\tconst newTrack = makeTrack(track, index, publisher, readyHandler);\n\ttracks.push(newTrack);\n});\n\nquery('.stem-buttons .stem-button').map((button, index) => {\n\tconst newButton = makeButton(button, index, publisher);\n\tbuttons.push(newButton);\n});\n\n/**\n * Event Listeners\n */\n\nif (everything) {\n\teverything.addEventListener('click', () => {\n\t\tpublisher.emit('allStemsActivated');\n\t});\n}\n\n// Use each track element as the source of a Stem object\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGFydGNvbW1hY29kZS9xL2luZGV4LmpzIiwic3JjL2pzL2NvbXBvbmVudHMvQnV0dG9uLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvU3RlbS5qcyIsInNyYy9qcy9jb21wb25lbnRzL1RyYWNrLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvcHVibGlzaGVyLmpzIiwic3JjL2pzL3N0ZW1zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy9CQTs7Ozs7OztBQU9BLFNBQVMsVUFBVCxDQUFvQixFQUFwQixFQUF3QixXQUF4QixFQUFxQyxTQUFyQyxFQUFnRDtBQUMvQyxLQUFNLFNBQVMsRUFBZjtBQUNBLFFBQU8sT0FBUCxHQUFpQixFQUFqQjs7QUFFQSxRQUFPLE1BQVAsR0FBZ0IsU0FBUyxNQUFULEdBQWtCO0FBQ2pDLFNBQU8sT0FBUCxHQUFpQixJQUFqQjtBQUNBLFNBQU8sT0FBUCxDQUFlLFNBQWYsQ0FBeUIsR0FBekIsQ0FBNkIsU0FBN0I7QUFDQSxFQUhEOztBQUtBLFFBQU8sT0FBUCxHQUFpQixTQUFTLE9BQVQsR0FBbUI7QUFDbkMsU0FBTyxPQUFQLEdBQWlCLEtBQWpCO0FBQ0EsU0FBTyxPQUFQLENBQWUsU0FBZixDQUF5QixNQUF6QixDQUFnQyxTQUFoQztBQUNBLEVBSEQ7O0FBS0EsUUFBTyxhQUFQLEdBQXVCLFNBQVMsYUFBVCxHQUF5QjtBQUMvQyxNQUFJLE9BQU8sT0FBWCxFQUFvQjtBQUNuQixVQUFPLE9BQVA7QUFDQSxHQUZE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LENBQWQ7QUFDQSxLQUFJLGVBQWUsT0FBTyxNQUExQixFQUFrQztBQUNqQyxtQkFBUyxrQkFBVCxFQUE2QixTQUE3QixDQUF1QyxHQUF2QyxDQUEyQyxPQUEzQztBQUNBO0FBQ0Q7O0FBRUQ7QUFDQSxjQUFjLEdBQWQsQ0FBa0IsVUFBQyxLQUFELEVBQVEsS0FBUixFQUFrQjtBQUNuQyxLQUFNLFdBQVcscUJBQVUsS0FBVixFQUFpQixLQUFqQix1QkFBbUMsWUFBbkMsQ0FBakI7QUFDQSxRQUFPLElBQVAsQ0FBWSxRQUFaO0FBQ0EsQ0FIRDs7QUFLQSxjQUFNLDRCQUFOLEVBQW9DLEdBQXBDLENBQXdDLFVBQUMsTUFBRCxFQUFTLEtBQVQsRUFBbUI7QUFDMUQsS0FBTSxZQUFZLHNCQUFXLE1BQVgsRUFBbUIsS0FBbkIsc0JBQWxCO0FBQ0EsU0FBUSxJQUFSLENBQWEsU0FBYjtBQUNBLENBSEQ7O0FBS0E7Ozs7QUFJQSxJQUFJLFVBQUosRUFBZ0I7QUFDZixZQUFXLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLFlBQU07QUFDMUMsc0JBQVUsSUFBVixDQUFlLG1CQUFmO0FBQ0EsRUFGRDtBQUdBOztBQUVEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIHRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KGxpc3QpIHtcbiAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobGlzdCkpO1xufTtcblxudmFyIGZpcnN0ID0gZnVuY3Rpb24gZmlyc3QoeHMpIHtcbiAgcmV0dXJuIHhzWzBdO1xufTtcblxudmFyIGVsZW1FcnJvciA9IGZ1bmN0aW9uIGVsZW1FcnJvcihlKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIlxcXCJcIiArIFN0cmluZyhlKSArIFwiXFxcIiBkb2VzJ3QgZXhpc3QgaW4gdGhlIGRvY3VtZW50XCIpO1xufTtcblxudmFyIGdldFJvb3QgPSBmdW5jdGlvbiBnZXRSb290KGUpIHtcbiAgcmV0dXJuICFlID8gZG9jdW1lbnQgOiBkb2N1bWVudCAmJiBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuY29udGFpbnMoZSkgPyBlIDogZWxlbUVycm9yKGUpO1xufTtcblxudmFyIHF1ZXJ5ID0gZXhwb3J0cy5xdWVyeSA9IGZ1bmN0aW9uIHF1ZXJ5KHEsIGUpIHtcbiAgdmFyIHJvb3QgPSBnZXRSb290KGUpO1xuICByZXR1cm4gcm9vdCA/IHRvQXJyYXkocm9vdC5xdWVyeVNlbGVjdG9yQWxsKHEpKSA6IFtdO1xufTtcblxudmFyIHF1ZXJ5T25lID0gZXhwb3J0cy5xdWVyeU9uZSA9IGZ1bmN0aW9uIHF1ZXJ5T25lKHEsIGUpIHtcbiAgcmV0dXJuIGZpcnN0KHF1ZXJ5KHEsIGUpKTtcbn07XG4iLCJcbi8qKlxuICogUmVjZWl2ZXMgYSBET00gZWxlbWVudC5cbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggZW5hYmxlLCBhY3RpdmF0ZSwgYW5kIGRlYWN0aXZhdGUgbWV0aG9kc1xuICogQHBhcmFtICB7RE9NIGVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge1NoYXBlfVxuICovXG5cbmZ1bmN0aW9uIG1ha2VCdXR0b24oZWwsIGJ1dHRvbkluZGV4LCBwdWJsaXNoZXIpIHtcblx0Y29uc3QgYnV0dG9uID0ge307XG5cdGJ1dHRvbi5lbGVtZW50ID0gZWw7XG5cblx0YnV0dG9uLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcblx0XHRidXR0b24uZW5hYmxlZCA9IHRydWU7XG5cdFx0YnV0dG9uLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZW5hYmxlZCcpO1xuXHR9O1xuXG5cdGJ1dHRvbi5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRidXR0b24uZW5hYmxlZCA9IGZhbHNlO1xuXHRcdGJ1dHRvbi5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2VuYWJsZWQnKTtcblx0fTtcblxuXHRidXR0b24udG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uIHRvZ2dsZUVuYWJsZWQoKSB7XG5cdFx0aWYgKGJ1dHRvbi5lbmFibGVkKSB7XG5cdFx0XHRidXR0b24uZGlzYWJsZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRidXR0b24uZW5hYmxlKCk7XG5cdFx0fVxuXHR9O1xuXG5cdGJ1dHRvbi5hY3RpdmF0ZSA9IGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuXHRcdGlmICghYnV0dG9uLmVuYWJsZWQpIGJ1dHRvbi5lbmFibGUoKTtcblx0XHRidXR0b24uYWN0aXZlID0gdHJ1ZTtcblx0XHRidXR0b24uZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblx0fTtcblxuXHRidXR0b24uZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG5cdFx0YnV0dG9uLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdGJ1dHRvbi5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuXHR9O1xuXG5cdGJ1dHRvbi50b2dnbGVBY3RpdmUgPSBmdW5jdGlvbiB0b2dnbGVBY3RpdmUoaW5wdXRTdGF0ZSkge1xuXHRcdGJ1dHRvbi5hY3RpdmUgPSBpbnB1dFN0YXRlIHx8ICFidXR0b24uYWN0aXZlO1xuXHRcdGlmIChidXR0b24uYWN0aXZlID09PSB0cnVlKSB7XG5cdFx0XHRidXR0b24uYWN0aXZhdGUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YnV0dG9uLmRlYWN0aXZhdGUoKTtcblx0XHR9XG5cdH07XG5cblx0YnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0YnV0dG9uLnRvZ2dsZUFjdGl2ZSgpO1xuXHRcdGNvbnN0IGV2ZW50ID0gKGJ1dHRvbi5hY3RpdmUpID8gJ3N0ZW1BY3RpdmF0ZWQnIDogJ3N0ZW1EZWFjdGl2YXRlZCc7XG5cdFx0cHVibGlzaGVyLmVtaXQoZXZlbnQsIGJ1dHRvbkluZGV4KTtcblx0fSk7XG5cblx0cHVibGlzaGVyLnN1YnNjcmliZSgnYWxsQnV0dG9uc0Rpc2FibGVkJywgYnV0dG9uLmRpc2FibGUpO1xuXG5cdHB1Ymxpc2hlci5zdWJzY3JpYmUoJ3N0ZW1QbGF5ZWQnLCAoYWN0aXZlSW5kZXgpID0+IHtcblx0XHRjb25zb2xlLmxvZyhhY3RpdmVJbmRleCwgYnV0dG9uSW5kZXgpO1xuXHRcdGlmIChhY3RpdmVJbmRleCA9PT0gYnV0dG9uSW5kZXgpIGJ1dHRvbi5hY3RpdmF0ZSgpO1xuXHR9KTtcblxuXHRyZXR1cm4gYnV0dG9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlQnV0dG9uO1xuIiwiaW1wb3J0IHsgcXVlcnksIHF1ZXJ5T25lIH0gZnJvbSAnQGFydGNvbW1hY29kZS9xJztcblxuLyoqXG4gKiBSZWNlaXZlcyBhIERPTSBlbGVtZW50IHdpdGggbGlua3MgdG8gYXVkaW8gZmlsZXMgdG8gYmUgcGxheWVkIGluIHRhbmRlbSBhcyBzdGVtcy5cbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggcGxheS9wYXVzZS9tdXRlIG1ldGhvZHNcbiAqIEBwYXJhbSAge0RPTSBlbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtTdGVtfVxuICovXG5mdW5jdGlvbiBtYWtlU3RlbShlbGVtZW50KSB7XG5cdGNvbnN0IHN0ZW0gPSB7fTtcblx0c3RlbS5hdWRpbyA9IGVsZW1lbnQ7XG5cdHN0ZW0uYWN0aXZlID0gZmFsc2U7XG5cdGNvbnN0IHVybCA9IHN0ZW0uYXVkaW8uZ2V0QXR0cmlidXRlKCdzcmMnKS5zcGxpdCgnLycpO1xuXHRzdGVtLmZpbGVOYW1lID0gdXJsLnNsaWNlKC0xKVswXTtcblxuXHRzdGVtLnBsYXkgPSBmdW5jdGlvbiBwbGF5U3RlbSgpIHtcblx0XHRzdGVtLmFjdGl2ZSA9IHRydWU7XG5cdFx0c3RlbS5hdWRpby5wbGF5KCk7XG5cdH07XG5cblx0c3RlbS5zdG9wID0gZnVuY3Rpb24gc3RvcFN0ZW0oKSB7XG5cdFx0c3RlbS5hY3RpdmUgPSBmYWxzZTtcblx0XHRzdGVtLmF1ZGlvLnBhdXNlKCk7XG5cdFx0c3RlbS5hdWRpby5jdXJyZW50VGltZSA9IDA7XG5cdH07XG5cblx0c3RlbS51bm11dGUgPSBmdW5jdGlvbiB1bm11dGVTdGVtKCkge1xuXHRcdHN0ZW0uYWN0aXZlID0gdHJ1ZTtcblx0XHRzdGVtLmF1ZGlvLnZvbHVtZSA9IDE7XG5cdH07XG5cblx0c3RlbS5tdXRlID0gZnVuY3Rpb24gbXV0ZVN0ZW0oKSB7XG5cdFx0Y29uc29sZS5sb2coJ3N0ZW0gbXV0ZWQnKVxuXHRcdHN0ZW0uYWN0aXZlID0gZmFsc2U7XG5cdFx0c3RlbS5hdWRpby52b2x1bWUgPSAwO1xuXHR9O1xuXG5cdHJldHVybiBzdGVtO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IG1ha2VTdGVtO1xuIiwiaW1wb3J0IHsgcXVlcnksIHF1ZXJ5T25lIH0gZnJvbSAnQGFydGNvbW1hY29kZS9xJztcbmltcG9ydCBtYWtlU3RlbSBmcm9tICcuL1N0ZW0nO1xuXG4vKipcbiAqIFJlY2VpdmVzIGEgRE9NIGVsZW1lbnQgd2l0aCBsaW5rcyB0byBhdWRpbyBmaWxlcyB0byBiZSBwbGF5ZWQgaW4gdGFuZGVtIGFzIHN0ZW1zLlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBwbGF5L3BhdXNlL211dGUgbWV0aG9kc1xuICogQHBhcmFtICB7RE9NIGVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge1N0ZW19XG4gKi9cbmZ1bmN0aW9uIG1ha2VUcmFjayhlbCwgdHJhY2tJbmRleCwgcHVibGlzaGVyLCByZWFkeUNhbGxiYWNrKSB7XG5cdGNvbnN0IHRyYWNrID0ge307XG5cdHRyYWNrLmVsZW1lbnQgPSBlbDtcblx0Y29uc3Qgc3RlbUVsZW1lbnRzID0gcXVlcnkoJ2F1ZGlvJywgZWwpO1xuXG5cdGNvbnN0IHN0ZW1zID0gW107XG5cblx0Ly8gU2VlIGlmIGFsbCBvZiB0aGUgdHJhY2tzIGFyZSByZWFkeVxuXG5cdGZ1bmN0aW9uIGNoZWNrSWZSZWFkeSgpIHtcblx0XHRjb25zdCByZWFkeUNvdW50ID0gc3RlbXMuZmlsdGVyKHN0ZW0gPT4gc3RlbS5pc1JlYWR5KS5sZW5ndGg7XG5cblx0XHRpZiAocmVhZHlDb3VudCA9PT0gc3RlbXMubGVuZ3RoKSB7XG5cdFx0XHR0cmFjay5yZWFkeSA9IHRydWU7XG5cdFx0XHQvLyByZXBvcnRzIGJhY2sgdG8gdGhlIG1haW4gc2NyaXB0LCBzbyBpdCBjYW4gY291bnQgYWxsIG9mIHRoZSBsb2FkZWQgdHJhY2tzXG5cdFx0XHRyZWFkeUNhbGxiYWNrKHRyYWNrSW5kZXgpO1xuXHRcdFx0aWYgKCF0cmFjay5oYXNFcnJvcnMpIHtcblx0XHRcdFx0dHJhY2suZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdyZWFkeScpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHJhY2suZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3JzJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gYWRkIGVhY2ggZWxlbWVudCB0byB0aGUgdHJhY2tzIGFycmF5LlxuXHQvLyBXaGVuIGl0J3MgbG9hZGVkLCByZXBvcnQgaXQuXG5cdC8vIElmIHRoZXJlIGlzIGEgbmV0d29yayBlcnJvciwgZmxhZyB0aGUgdHJhY2tcblx0c3RlbUVsZW1lbnRzLm1hcCgoc3RlbUVsZW1lbnQpID0+IHtcblx0XHRjb25zdCBzdGVtID0gbWFrZVN0ZW0oc3RlbUVsZW1lbnQpO1xuXHRcdGNvbnN0IHVybCA9IHN0ZW1FbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJykuc3BsaXQoJy8nKTtcblx0XHRzdGVtLmZpbGVOYW1lID0gdXJsLnNsaWNlKC0xKVswXTtcblx0XHRzdGVtcy5wdXNoKHN0ZW0pO1xuXG5cdFx0c3RlbS5hdWRpby5sb2FkKCk7XG5cblx0XHRmdW5jdGlvbiBjYW5QbGF5VGhyb3VnaEhhbmRsZXIoKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhgJHt0cmFja0luZGV4fSAtICR7c3RlbS5maWxlTmFtZX0gaXMgcmVhZHlgKVxuXHRcdFx0c3RlbS5pc1JlYWR5ID0gdHJ1ZTtcblx0XHRcdHN0ZW0uYXVkaW8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCBjYW5QbGF5VGhyb3VnaEhhbmRsZXIpO1xuXHRcdFx0Y2hlY2tJZlJlYWR5KCk7XG5cdFx0fVxuXG5cdFx0c3RlbS5hdWRpby5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsIGNhblBsYXlUaHJvdWdoSGFuZGxlcik7XG5cblx0XHRzdGVtLmF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGUpID0+IHtcblx0XHRcdGlmIChlLnRhcmdldC5lcnJvci5jb2RlID09PSAzIHx8IGUudGFyZ2V0LmVycm9yLmNvZGUgPT09IDQpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGAke3N0ZW0uZmlsZU5hbWV9IGNvdWxkIG5vdCBiZSBsb2FkZWRgKTtcblx0XHRcdFx0c3RlbS5pc1JlYWR5ID0gdHJ1ZTtcblx0XHRcdFx0dHJhY2suaGFzRXJyb3JzID0gdHJ1ZTtcblx0XHRcdFx0Y2hlY2tJZlJlYWR5KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdC8vIGZ1bmN0aW9ucyB0aGF0IHdlIGF0dGFjaCB0byB0aGUgJ3RyYWNrJyBvYmplY3QgYXJlIHB1YmxpYyAmXG5cdC8vIHVzYWJsZSBmcm9tIHRoZSBvdXRzaWRlLlxuXHQvLyBFdmVyeXRoaW5nIGVsc2UgaXMgcHJpdmF0ZS5cblxuXG5cdGZ1bmN0aW9uIHBsYXlBbGxTdGVtcygpIHtcblx0XHRzdGVtcy5tYXAoKHN0ZW0sIGluZGV4KSA9PiB7XG5cdFx0XHRzdGVtLnVubXV0ZSgpO1xuXHRcdFx0cHVibGlzaGVyLmVtaXQoJ3N0ZW1QbGF5ZWQnLCBpbmRleCk7XG5cdFx0fSk7XG5cdH1cblxuXG5cdGNvbnN0IHN0YXJ0U3luY2VkID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHN0ZW1zLm1hcChzdGVtID0+IHN0ZW0ubXV0ZSgpKTtcblx0XHRmdW5jdGlvbiBjaGVja1N5bmMoKSB7XG5cdFx0XHRzdGVtcy5tYXAoc3RlbSA9PiBzdGVtLnBsYXkoKSk7XG5cdFx0XHRjb25zdCBtaW5NYXggPSBzdGVtcy5yZWR1Y2UoKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWluOiBNYXRoLm1pbihwcmV2aW91cy5taW4gfHwgY3VycmVudC5hdWRpby5jdXJyZW50VGltZSwgY3VycmVudC5hdWRpby5jdXJyZW50VGltZSksXG5cdFx0XHRcdFx0bWF4OiBNYXRoLm1heChwcmV2aW91cy5tYXggfHwgY3VycmVudC5hdWRpby5jdXJyZW50VGltZSwgY3VycmVudC5hdWRpby5jdXJyZW50VGltZSksXG5cdFx0XHRcdH07XG5cdFx0XHR9LCB7IG1pbjogdW5kZWZpbmVkLCBtYXg6IHVuZGVmaW5lZCB9KTtcblx0XHRcdGNvbnN0IGRpZmYgPSBtaW5NYXgubWF4IC0gbWluTWF4Lm1pbjtcblx0XHRcdGlmIChtaW5NYXgubWF4ID09PSAwKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdOb3QgcmVhZHkuLiB0cnlpbmcgYWdhaW4nKTtcblx0XHRcdFx0c2V0VGltZW91dChjaGVja1N5bmMsIDUwMCk7XG5cdFx0XHR9IGVsc2UgaWYgKGRpZmYgPCAwLjA1KSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGBzdGFydGluZyB3aXRoIGRpZmYgb2YgJHtkaWZmfWApO1xuXHRcdFx0XHRzdGVtcy5tYXAoc3RlbSA9PiBzdGVtLnN0b3AoKSk7XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHBsYXlBbGxTdGVtcygpO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0fSwgMjUwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGBkaWZmOiAke2RpZmZ9ICAtIHRyeWluZyBhZ2Fpbi4uYCk7XG5cdFx0XHRcdHN0ZW1zLm1hcChzdGVtID0+IHN0ZW0uc3RvcCgpKTtcblx0XHRcdFx0c2V0VGltZW91dChjaGVja1N5bmMsIDUwMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHNldFRpbWVvdXQoY2hlY2tTeW5jLCA1MDApO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBwbGF5KCkge1xuXHRcdHRyYWNrLmFjdGl2ZSA9IHRydWU7XG5cdFx0dHJhY2suZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdsb2FkaW5nJyk7XG5cdFx0Ly8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgaXQncyBub3QgcmVhZHkuIFRoZSB1c2VyIHNob3VsZG4ndCBiZVxuXHRcdC8vIGFibGUgdG8gcGxheSB0aGUgdHJhY2sgdW50aWwgaXQncyByZWFkeSBhbnl3YXksIHRob3VnaC5cblx0XHRpZiAoIXRyYWNrLnJlYWR5KSByZXR1cm4gZmFsc2U7XG5cdFx0Ly8gY29uc3QgaXNTeW5jZWQgPSBzdGFydFN5bmNlZCgpO1xuXHRcdHN0YXJ0U3luY2VkKCkudGhlbigoKSA9PiB7XG5cdFx0XHR0cmFjay5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3BsYXlpbmcnKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHN0b3AoKSB7XG5cdFx0c3RlbXMubWFwKHN0ZW0gPT4gc3RlbS5zdG9wKCkpO1xuXHRcdHRyYWNrLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdHRyYWNrLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncGxheWluZycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmQgZXZlbnQgbGlzdGVuZXJzICYgZW1pdHRlcnNcblx0ICovXG5cblx0dHJhY2suZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRwdWJsaXNoZXIuZW1pdCgndHJhY2tQbGF5ZWQnLCB0cmFja0luZGV4KTtcblx0fSk7XG5cblx0cHVibGlzaGVyLnN1YnNjcmliZSgndHJhY2tQbGF5ZWQnLCAobmV3SW5kZXgpID0+IHtcblx0XHRkZWJ1Z091dHB1dC5pbm5lckhUTUwgPSAnJztcblx0XHRpZiAobmV3SW5kZXggPT09IHRyYWNrSW5kZXgpIHtcblx0XHRcdHBsYXkoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RvcCgpO1xuXHRcdH1cblx0fSk7XG5cblx0cHVibGlzaGVyLnN1YnNjcmliZSgnc3RlbUFjdGl2YXRlZCcsIChzdGVtSW5kZXgpID0+IHtcblx0XHRpZiAodHJhY2suYWN0aXZlKSBzdGVtc1tzdGVtSW5kZXhdLnVubXV0ZSgpO1xuXHR9KTtcblx0cHVibGlzaGVyLnN1YnNjcmliZSgnc3RlbURlYWN0aXZhdGVkJywgKHN0ZW1JbmRleCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKHN0ZW1JbmRleCwgdHJhY2suYWN0aXZlKTtcblx0XHRpZiAodHJhY2suYWN0aXZlKSBzdGVtc1tzdGVtSW5kZXhdLm11dGUoKTtcblx0fSk7XG5cblx0cHVibGlzaGVyLnN1YnNjcmliZSgnYWxsU3RlbXNBY3RpdmF0ZWQnLCBwbGF5QWxsU3RlbXMpO1xuXG5cdC8qKlxuXHQgKiBEZWJ1ZyBsb2dnaW5nXG5cdCAqL1xuXG5cdGNvbnN0IGRlYnVnT3V0cHV0ID0gcXVlcnlPbmUoJyNkZWJ1Zy1vdXRwdXQnKTtcblxuXHRmdW5jdGlvbiBwYWQoaW5wdXQsIHBhZExlbmd0aCA9IDIsIGNoYXIgPSAnMCcsIGRpcmVjdGlvbiA9ICdyaWdodCcpIHtcblx0XHRsZXQgc3RyaW5nID0gaW5wdXQudG9TdHJpbmcoKTtcblx0XHRjb25zdCBkaWZmID0gcGFkTGVuZ3RoIC0gaW5wdXQubGVuZ3RoO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZjsgaSArPSAxKSB7XG5cdFx0XHRpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG5cdFx0XHRcdHN0cmluZyArPSBjaGFyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RyaW5nID0gY2hhciArIHN0cmluZztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHN0cmluZztcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdERlY2ltYWwoaW5wdXQsIGxMZW5ndGgsIHJMZW5ndGgpIHtcblx0XHRjb25zdCBhcnIgPSBpbnB1dC50b1N0cmluZygpLnNwbGl0KCcuJyk7XG5cdFx0aWYgKGFyci5sZW5ndGggPT09IDEpIGFyci5wdXNoKCcwJyk7XG5cdFx0Y29uc3Qgd2hvbGUgPSBwYWQoYXJyWzBdLCBsTGVuZ3RoLCAnMCcsICdsZWZ0Jyk7XG5cdFx0Y29uc3QgZGVjID0gcGFkKGFyclsxXSwgckxlbmd0aCwgJzAnLCAncmlnaHQnKS5zdWJzdHIoMCwgckxlbmd0aCk7XG5cdFx0cmV0dXJuIGAke3dob2xlfS4ke2RlY31gO1xuXHR9XG5cblx0c2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdGlmICh0cmFjay5hY3RpdmUpIHtcblx0XHRcdGNvbnN0IGRlYnVnU3RyaW5nID0gWycqKioqKioqJ107XG5cdFx0XHRsZXQgbWluO1xuXHRcdFx0bGV0IG1heDtcblx0XHRcdHN0ZW1zLm1hcCgoc3RlbSwgaW5kZXgpID0+IHtcblx0XHRcdFx0aWYgKHN0ZW0uYXVkaW8pIHtcblx0XHRcdFx0XHRjb25zdCBhY3RpdmF0ZWQgPSAoc3RlbS5hY3RpdmUpID8gJ2FjdGl2YXRlZCcgOiAnZGVhY3RpdmF0ZWQnO1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRUaW1lID0gTWF0aC5yb3VuZChzdGVtLmF1ZGlvLmN1cnJlbnRUaW1lICogMTAwMDApIC8gMTAwMDA7XG5cdFx0XHRcdFx0Y29uc3QgZm9ybWF0dGVkVGltZSA9IGZvcm1hdERlY2ltYWwoY3VycmVudFRpbWUsIDMsIDQpO1xuXG5cdFx0XHRcdFx0bWluID0gKG1pbikgPyBNYXRoLm1pbihtaW4sIGN1cnJlbnRUaW1lKSA6IGN1cnJlbnRUaW1lO1xuXHRcdFx0XHRcdG1heCA9IChtYXgpID8gTWF0aC5tYXgobWF4LCBjdXJyZW50VGltZSkgOiBjdXJyZW50VGltZTtcblx0XHRcdFx0XHRpZiAoY3VycmVudFRpbWUgPT09IDApIHN0ZW0uYXVkaW8ucGxheSgpO1xuXHRcdFx0XHRcdGRlYnVnU3RyaW5nLnB1c2goYCAgIHN0ZW0gJHtpbmRleH06ICR7Zm9ybWF0dGVkVGltZX0gfCAke3N0ZW0uZmlsZU5hbWV9IC0gJHthY3RpdmF0ZWR9IHwgJHtzdGVtLmF1ZGlvLmJ1ZmZlcmVkLmVuZCgwKX0gLyAke3N0ZW0uYXVkaW8uZHVyYXRpb259YCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Y29uc3QgZGlmZiA9IGZvcm1hdERlY2ltYWwobWF4IC0gbWluLCAxLCA2KTtcblx0XHRcdGRlYnVnU3RyaW5nLnB1c2goYCAgIG1heCBkaWZmOiAke2RpZmZ9YCk7XG5cdFx0XHRkZWJ1Z091dHB1dC5pbm5lckhUTUwgPSBkZWJ1Z1N0cmluZy5qb2luKCc8YnI+Jyk7XG5cdFx0fVxuXHR9LCAxMDApO1xuXG5cdHRyYWNrLnN0ZW1zQ291bnQgPSBzdGVtcy5sZW5ndGg7XG5cdHJldHVybiB0cmFjaztcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBtYWtlVHJhY2s7XG4iLCJcbmNsYXNzIFB1YlN1YkVtaXR0ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvLyBjcmVhdGUgYSBuZXcgTWFwIHRvIGhvbGQgYWxsIG9mIHRoZSB0b3BpY3Ncblx0XHR0aGlzLmxpc3RlbmVycyA9IG5ldyBNYXAoKTtcblx0fVxuXG5cdHN1YnNjcmliZSh0b3BpYywgY2FsbGJhY2spIHtcblx0XHQvLyBpZiB0aGUgbGlzdGVuZXIgZG9lcyBub3QgaGFlIHRoZSB0b3BpYyB5ZXQsIGFkZCBpdC5cblx0XHRpZiAoIXRoaXMubGlzdGVuZXJzLmhhcyh0b3BpYykpIHRoaXMubGlzdGVuZXJzLnNldCh0b3BpYywgW10pO1xuXHRcdC8vIHB1c2ggdGhlIGNhbGxiYWNrIHRvIHRoZSB0b3BpYydzIGFycmF5XG5cdFx0dGhpcy5saXN0ZW5lcnMuZ2V0KHRvcGljKS5wdXNoKGNhbGxiYWNrKTtcblx0fVxuXG5cdHVuc3Vic2NyaWJlKHRvcGljLCBjYWxsYmFjaykge1xuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLmdldCh0b3BpYyk7XG5cdFx0bGV0IGluZGV4O1xuXG5cdFx0aWYgKGxpc3RlbmVycyAmJiBsaXN0ZW5lcnMubGVuZ3RoKSB7XG5cdFx0XHQvLyBmaW5kIHRoZSBpbmRleCBvZiB0aGUgY2FsbGJhY2sgd2UncmUgcmVtb3Zpbmdcblx0XHRcdGluZGV4ID0gbGlzdGVuZXJzLnJlZHVjZSgoaSwgbGlzdGVuZXIsIGN1cnJlbnRJbmRleCkgPT4ge1xuXHRcdFx0XHQodHlwZW9mKGxpc3RlbmVyKSA9PT0gJ2Z1bmN0aW9uJyAmJiBsaXN0ZW5lciA9PT0gY2FsbGJhY2spID9cblx0XHRcdFx0XHRpID0gY3VycmVudEluZGV4IDpcblx0XHRcdFx0XHRpO1xuXHRcdFx0fSwgLTEpO1xuXG5cdFx0XHRpZiAoaW5kZXggPiAtMSkge1xuXHRcdFx0XHQvLyBpZiB3ZSBmb3VuZCBhIG1hdGNoLCBzcGxpY2UgaXQgb3V0LCBhbmQgcmVzdXBwbHkgdGhlIG1hcCB3aXRoIHRoZSBzcGxpY2VkIGFycmF5XG5cdFx0XHRcdGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHR0aGlzLmxpc3RlbmVycy5zZXQodG9waWMsIGxpc3RlbmVycyk7XG5cdFx0XHRcdHJldHVybiB0cnVlOyAvLyByZXR1cm4gdHJ1ZSBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZ1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7IC8vIHJldHVybiBmYWxzZSBpZiB3ZSBkaWRuJ3Rcblx0fVxuXG5cdGVtaXQodG9waWMsIC4uLmFyZ3MpIHtcblx0XHQvLyBnZXQgdGhlIGxpc3RlbmVycyBzdWJzY3JpYmVkIHRvIHRoZSB0b3BpY1xuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLmdldCh0b3BpYyk7XG5cblx0XHRpZiAobGlzdGVuZXJzICYmIGxpc3RlbmVycy5sZW5ndGgpIHtcblx0XHRcdC8vIGV4ZWN1dGUgZWFjaCBjYWxsYmFjayB3aXRoIGFueSBzdXBwbGllZCBhcmd1bWVudHNcblx0XHRcdGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuXHRcdFx0XHRsaXN0ZW5lciguLi5hcmdzKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5jb25zdCBwdWJsaXNoZXIgPSBuZXcgUHViU3ViRW1pdHRlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoZXI7XG4iLCIvLyBBIHNtYWxsIHV0aWxpdHkgZm9yIGdldHRpbmcgRE9NIGVsZW1lbnRzXG5pbXBvcnQgeyBxdWVyeSwgcXVlcnlPbmUgfSBmcm9tICdAYXJ0Y29tbWFjb2RlL3EnO1xuXG4vLyBBIGNvbXBvbmVudCB5b3UgY2FuIHVzZSB0byBlbWl0IGFuZCBzdWJzY3JpYmUgdG8gZXZlbnRzLlxuLy8gSGVscGZ1bCB0byBkZWNvdXBsZSBVSSBzdHVmZlxuaW1wb3J0IHB1Ymxpc2hlciBmcm9tICcuL2NvbXBvbmVudHMvcHVibGlzaGVyJztcbmltcG9ydCBtYWtlVHJhY2sgZnJvbSAnLi9jb21wb25lbnRzL1RyYWNrJztcbmltcG9ydCBtYWtlQnV0dG9uIGZyb20gJy4vY29tcG9uZW50cy9CdXR0b24nO1xuXG4vLyBmaXJzdCwganVzdCBmaW5kIHRoZSBlbGVtZW50c1xuY29uc3QgdHJhY2tFbGVtZW50cyA9IHF1ZXJ5KCcuc3RlbS10cmFjaycpO1xuY29uc3QgZXZlcnl0aGluZyA9IHF1ZXJ5T25lKCcuc3RlbS1idXR0b25zIC5wbGF5LWFsbCcpIHx8IGZhbHNlO1xuY29uc3QgYnV0dG9ucyA9IFtdO1xuY29uc3QgdHJhY2tzID0gW107XG5cbmxldCByZWFkeUNvdW50ID0gMDtcblxuZnVuY3Rpb24gcmVhZHlIYW5kbGVyKCkge1xuXHRyZWFkeUNvdW50ICs9IDE7XG5cdGlmIChyZWFkeUNvdW50ID09PSB0cmFja3MubGVuZ3RoKSB7XG5cdFx0cXVlcnlPbmUoJy5zdGVtcy1jb250YWluZXInKS5jbGFzc0xpc3QuYWRkKCdyZWFkeScpO1xuXHR9XG59XG5cbi8vIGFkZCBlYWNoIGNvbXBvc2VkIHRyYWNrIHRvIGFuIGFycmF5XG50cmFja0VsZW1lbnRzLm1hcCgodHJhY2ssIGluZGV4KSA9PiB7XG5cdGNvbnN0IG5ld1RyYWNrID0gbWFrZVRyYWNrKHRyYWNrLCBpbmRleCwgcHVibGlzaGVyLCByZWFkeUhhbmRsZXIpO1xuXHR0cmFja3MucHVzaChuZXdUcmFjayk7XG59KTtcblxucXVlcnkoJy5zdGVtLWJ1dHRvbnMgLnN0ZW0tYnV0dG9uJykubWFwKChidXR0b24sIGluZGV4KSA9PiB7XG5cdGNvbnN0IG5ld0J1dHRvbiA9IG1ha2VCdXR0b24oYnV0dG9uLCBpbmRleCwgcHVibGlzaGVyKTtcblx0YnV0dG9ucy5wdXNoKG5ld0J1dHRvbik7XG59KTtcblxuLyoqXG4gKiBFdmVudCBMaXN0ZW5lcnNcbiAqL1xuXG5pZiAoZXZlcnl0aGluZykge1xuXHRldmVyeXRoaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdHB1Ymxpc2hlci5lbWl0KCdhbGxTdGVtc0FjdGl2YXRlZCcpO1xuXHR9KTtcbn1cblxuLy8gVXNlIGVhY2ggdHJhY2sgZWxlbWVudCBhcyB0aGUgc291cmNlIG9mIGEgU3RlbSBvYmplY3RcbiJdfQ=="}