{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@artcommacode/q/index.js","src/js/components/Button.js","src/js/components/Stem.js","src/js/components/Track.js","src/js/components/publisher.js","src/js/stems.js"],"names":[],"mappings":"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","file":"stems.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar toArray = function toArray(list) {\n  return [].concat(_toConsumableArray(list));\n};\n\nvar first = function first(xs) {\n  return xs[0];\n};\n\nvar elemError = function elemError(e) {\n  throw new Error(\"\\\"\" + String(e) + \"\\\" does't exist in the document\");\n};\n\nvar getRoot = function getRoot(e) {\n  return !e ? document : document && document.body && document.body.contains(e) ? e : elemError(e);\n};\n\nvar query = exports.query = function query(q, e) {\n  var root = getRoot(e);\n  return root ? toArray(root.querySelectorAll(q)) : [];\n};\n\nvar queryOne = exports.queryOne = function queryOne(q, e) {\n  return first(query(q, e));\n};\n","\n/**\n * Receives a DOM element.\n * Returns an object with enable, activate, and deactivate methods\n * @param  {DOM element} element\n * @return {Shape}\n */\n\nfunction makeButton(el, buttonIndex, publisher) {\n\tconst button = {};\n\tbutton.element = el;\n\n\tbutton.enable = function enable() {\n\t\tbutton.enabled = true;\n\t\tbutton.element.classList.add('enabled');\n\t};\n\n\tbutton.disable = function disable() {\n\t\tbutton.enabled = false;\n\t\tbutton.element.classList.remove('enabled');\n\t};\n\n\tbutton.toggleEnabled = function toggleEnabled() {\n\t\tif (button.enabled) {\n\t\t\tbutton.disable();\n\t\t} else {\n\t\t\tbutton.enable();\n\t\t}\n\t};\n\n\tbutton.activate = function activate() {\n\t\tif (!button.enabled) button.enable();\n\t\tbutton.active = true;\n\t\tbutton.element.classList.add('active');\n\t};\n\n\tbutton.deactivate = function deactivate() {\n\t\tbutton.active = false;\n\t\tbutton.element.classList.remove('active');\n\t};\n\n\tbutton.toggleActive = function toggleActive(inputState) {\n\t\tbutton.active = inputState || !button.active;\n\t\tif (button.active === true) {\n\t\t\tbutton.activate();\n\t\t} else {\n\t\t\tbutton.deactivate();\n\t\t}\n\t};\n\n\tbutton.element.addEventListener('click', () => {\n\t\tbutton.toggleActive();\n\t\tconst event = (button.active) ? 'stemActivated' : 'stemDeactivated';\n\t\tconsole.log(event, buttonIndex);\n\t\tpublisher.emit(event, buttonIndex);\n\t});\n\n\tpublisher.subscribe('allButtonsDisabled', button.disable);\n\tpublisher.subscribe('allStemsActivated', () => {\n\t\tbutton.activate();\n\t});\n\n\tpublisher.subscribe('stemPlayed', (activeIndex) => {\n\t\tif (activeIndex === buttonIndex) button.activate();\n\t});\n\n\treturn button;\n}\n\nexport default makeButton;\n","import { query, queryOne } from '@artcommacode/q';\n\n/**\n * Receives a DOM element with links to audio files to be played in tandem as stems.\n * Returns an object with play/pause/mute methods\n * @param  {DOM element} element\n * @return {Stem}\n */\nfunction makeStem(element) {\n\tconst stem = {};\n\tstem.audio = element;\n\tstem.active = false;\n\tconst url = stem.audio.getAttribute('src').split('/');\n\tstem.fileName = url.slice(-1)[0];\n\n\tstem.play = function playStem() {\n\t\tstem.active = true;\n\t\tstem.audio.play();\n\t};\n\n\tstem.stop = function stopStem() {\n\t\tstem.active = false;\n\t\tstem.audio.pause();\n\t\tstem.audio.currentTime = 0;\n\t};\n\n\tstem.activate = function activateStem() {\n\t\tstem.active = true;\n\t\tstem.audio.volume = 1;\n\t};\n\n\tstem.deactivate = function deactivateStem() {\n\t\tstem.active = false;\n\t\tstem.audio.volume = 0;\n\t};\n\n\treturn stem;\n}\n\n\nexport default makeStem;\n","import { query, queryOne } from '@artcommacode/q';\nimport makeStem from './Stem';\n\n/**\n * Receives a DOM element with links to audio files to be played in tandem as stems.\n * Returns an object with play/pause/mute methods\n * @param  {DOM element} element\n * @return {Stem}\n */\nfunction makeTrack(el, trackIndex, publisher) {\n\tconst track = {};\n\ttrack.element = el;\n\tconst stemElements = query('audio', el);\n\n\tconst stems = [];\n\n\t// See if all of the tracks are ready\n\n\tfunction checkIfReady() {\n\t\tconst readyCount = stems.filter(stem => stem.isReady).length;\n\t\tif (readyCount === stems.length) {\n\t\t\ttrack.ready = true;\n\t\t\ttrack.element.classList.add('ready');\n\t\t}\n\t}\n\n\t// add each element to the tracks array.\n\t// When it's loaded,\n\tstemElements.map((stemElement) => {\n\t\tconst stem = makeStem(stemElement);\n\t\tconst url = stemElement.getAttribute('src').split('/');\n\t\tstem.fileName = url.slice(-1)[0];\n\t\tstems.push(stem);\n\n\t\tstem.audio.addEventListener('canplaythrough', () => {\n\t\t\tstem.isReady = true;\n\t\t\tcheckIfReady();\n\t\t});\n\t});\n\n\t// functions that we attach to the 'track' object are public &\n\t// usable from the outside.\n\t// Everything else is private.\n\n\tfunction play() {\n\t\t// don't do anything if it's not ready. The user shouldn't be\n\t\t// able to play the track until it's ready anyway, though.\n\t\tif (!track.ready) return false;\n\t\tstems.map((stem, index) => {\n\t\t\tstem.play();\n\t\t\tpublisher.emit('stemPlayed', index);\n\t\t});\n\t\ttrack.active = true;\n\t\ttrack.element.classList.add('playing');\n\t\treturn true;\n\t}\n\n\tfunction stop() {\n\t\tstems.map(stem => stem.stop());\n\t\ttrack.active = false;\n\t\ttrack.element.classList.remove('playing');\n\t}\n\n\t/**\n\t * Bind event listeners & emitters\n\t */\n\n\ttrack.element.addEventListener('click', () => {\n\t\tpublisher.emit('trackPlayed', trackIndex);\n\t});\n\n\tpublisher.subscribe('trackPlayed', (newIndex) => {\n\t\tif (newIndex === trackIndex) {\n\t\t\tplay();\n\t\t} else {\n\t\t\tstop();\n\t\t}\n\t});\n\n\tpublisher.subscribe('stemActivated', (stemIndex) => {\n\t\tif (track.active) stems[stemIndex].activate();\n\t});\n\tpublisher.subscribe('stemDeactivated', (stemIndex) => {\n\t\tif (track.active) stems[stemIndex].deactivate();\n\t});\n\t// publisher.subscribe('stemToggled', stemIndex => stems[stemIndex].toggle());\n\tpublisher.subscribe('allStemsActivated', () => {\n\t\tstems.map((stem, index) => {\n\t\t\tstem.activate()\n\t\t\tpublisher.emit('stemPlayed', index);\n\t\t});\n\t});\n\n\t/**\n\t * Debug logging\n\t */\n\n\tsetInterval(() => {\n\t\tif (track.active) {\n\t\t\tstems.map((stem, index) => {\n\t\t\t\tconst activated = (stem.active) ? 'activated' : 'deactivated';\n\t\t\t\tconst currentTime = Math.round(stem.audio.currentTime * 100) / 100;\n\t\t\t\tconsole.log(`   stem ${index}: ${currentTime} | ${stem.fileName} - ${activated}`);\n\t\t\t});\n\t\t\tconsole.log('*******');\n\t\t}\n\t}, 100);\n\n\ttrack.stemsCount = stems.length;\n\treturn track;\n}\n\n\nexport default makeTrack;\n","\nclass PubSubEmitter {\n\tconstructor() {\n\t\t// create a new Map to hold all of the topics\n\t\tthis.listeners = new Map();\n\t}\n\n\tsubscribe(topic, callback) {\n\t\t// if the listener does not hae the topic yet, add it.\n\t\tif (!this.listeners.has(topic)) this.listeners.set(topic, []);\n\t\t// push the callback to the topic's array\n\t\tthis.listeners.get(topic).push(callback);\n\t}\n\n\tunsubscribe(topic, callback) {\n\t\tconst listeners = this.listeners.get(topic);\n\t\tlet index;\n\n\t\tif (listeners && listeners.length) {\n\t\t\t// find the index of the callback we're removing\n\t\t\tindex = listeners.reduce((i, listener, currentIndex) => {\n\t\t\t\t(typeof(listener) === 'function' && listener === callback) ?\n\t\t\t\t\ti = currentIndex :\n\t\t\t\t\ti;\n\t\t\t}, -1);\n\n\t\t\tif (index > -1) {\n\t\t\t\t// if we found a match, splice it out, and resupply the map with the spliced array\n\t\t\t\tlisteners.splice(index, 1);\n\t\t\t\tthis.listeners.set(topic, listeners);\n\t\t\t\treturn true; // return true if we removed something\n\t\t\t}\n\t\t}\n\t\treturn false; // return false if we didn't\n\t}\n\n\temit(topic, ...args) {\n\t\t// get the listeners subscribed to the topic\n\t\tconst listeners = this.listeners.get(topic);\n\n\t\tif (listeners && listeners.length) {\n\t\t\t// execute each callback with any supplied arguments\n\t\t\tlisteners.forEach((listener) => {\n\t\t\t\tlistener(...args);\n\t\t\t});\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst publisher = new PubSubEmitter();\n\nexport default publisher;\n","// A small utility for getting DOM elements\nimport { query, queryOne } from '@artcommacode/q';\n\n// A component you can use to emit and subscribe to events.\n// Helpful to decouple UI stuff\nimport publisher from './components/publisher';\nimport makeTrack from './components/Track';\nimport makeButton from './components/Button';\n\n// first, just find the elements\nconst trackElements = query('.stem-track');\nconst everything = queryOne('.stem-buttons .play-all') || false;\nconst buttons = [];\nconst tracks = [];\n\n// add each composed track to an array\ntrackElements.map((track, index) => {\n\tconst newTrack = makeTrack(track, index, publisher);\n\ttracks.push(newTrack);\n});\n\nquery('.stem-buttons .play-stem').map((button, index) => {\n\tconst newButton = makeButton(button, index, publisher);\n\tbuttons.push(newButton);\n});\n\n/**\n * Event Listeners\n */\n\nif (everything) {\n\teverything.addEventListener('click', () => {\n\t\tpublisher.emit('allStemsActivated');\n\t});\n}\n\n// Use each track element as the source of a Stem object\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}